{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultValue","keybindingOptions","label","value","orientationOptions","App","state","keybindingValue","orientationValue","graphUrl","updateValue","v","setState","changeKeybindingValue","changeOrientation","updateUrl","encodedMarkup","plantumlEncoder","encode","url","console","log","this","className","bottom","onChange","e","target","map","option","key","xs","end","onClick","theme","fontSize","keyboardHandler","name","width","height","editorProps","$blockScrolling","commands","bindKey","win","mac","exec","alt","src","sm","md","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8e64d3e.chunk.js","sourcesContent":["import React from \"react\";\nimport AceEditor from \"react-ace\";\nimport plantumlEncoder from \"plantuml-encoder\";\nimport { Row, Col } from \"react-flexbox-grid\";\n\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/keybinding-vim\";\nimport \"./App.css\";\n\nconst defaultValue = `@startuml\ntitle Example\n\nFrontend -> Middletier: GET /posts\n\nMiddletier -> Backend: GET /comments\nBackend -> Service: comments\nService --> Backend: return(comments)\nBackend --> Middletier: return(comments)\n\nalt links not provided\n  Middletier -> Backend: GET /thumbnails\n  Backend --> Middletier: return(thumbnails)\n  Middletier -> Backend: GET /likes\n  Backend --> Middletier: return(likes)\nelse  links provided\n    Middletier -> Backend: POST /links\n    Backend --> Middletier: return(links)\nend\n\nMiddletier --> Frontend: return(posts)\n@enduml`;\n\nconst keybindingOptions = [\n  { label: \"Normal\", value: \"normal\" },\n  { label: \"Vim\", value: \"vim\" },\n  { label: \"Emacs\", value: \"emacs\" }\n];\n\nconst orientationOptions = [\n  { label: \"Horizontal\", value: \"horizontal\" },\n  { label: \"Vertical\", value: \"vertical\" }\n];\n\nclass App extends React.Component {\n  state = {\n    value: defaultValue,\n    keybindingValue: keybindingOptions[0].value,\n    orientationValue: orientationOptions[0].value,\n    graphUrl: \"\"\n  };\n\n  updateValue = v => this.setState({ value: v });\n  changeKeybindingValue = v => this.setState({ keybindingValue: v });\n  changeOrientation = v => this.setState({ orientationValue: v });\n\n  updateUrl = () => {\n    const { value } = this.state;\n    const encodedMarkup = plantumlEncoder.encode(value);\n    const url = `http://www.plantuml.com/plantuml/img/${encodedMarkup}`;\n    console.log(\"url --- \", url);\n    this.setState({ graphUrl: url });\n  };\n\n  componentDidMount() {\n    this.updateUrl();\n  }\n\n  render() {\n    const { value, keybindingValue, orientationValue, graphUrl } = this.state;\n    return (\n      <div className=\"app\">\n        <h1>PlantUML Previewer</h1>\n        <Row className=\"options-row\" bottom=\"xs\">\n          <Col className=\"option-item\">\n            <label>Keybinding</label>\n            <br />\n            <select\n              value={keybindingValue}\n              onChange={e => this.changeKeybindingValue(e.target.value)}\n            >\n              {keybindingOptions.map(option => (\n                <option\n                  key={`keybinding-options-${option.value}`}\n                  value={option.value}\n                >\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </Col>\n          <Col className=\"option-item\">\n            <label>Orientation</label>\n            <br />\n            <select\n              value={orientationValue}\n              onChange={e => this.changeOrientation(e.target.value)}\n            >\n              {orientationOptions.map(option => (\n                <option\n                  key={`orientation-options-${option.value}`}\n                  value={option.value}\n                >\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </Col>\n          <Col xs>\n            <Row end=\"xs\">\n              <Col>\n                <button onClick={this.updateUrl}>Submit</button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {orientationValue === \"horizontal\" ? (\n          <>\n            <Row>\n              <Col xs={12}>\n                <div className=\"ace-con\">\n                  <AceEditor\n                    theme=\"github\"\n                    fontSize={14}\n                    onChange={v => {\n                      this.updateValue(v);\n                    }}\n                    keyboardHandler={keybindingValue}\n                    value={value}\n                    name=\"plantuml-input\"\n                    width=\"100%\"\n                    height=\"425px\"\n                    editorProps={{ $blockScrolling: true }}\n                    commands={[\n                      {\n                        name: \"updateUrl\",\n                        bindKey: { win: \"Shift-Enter\", mac: \"Shift-Enter\" },\n                        exec: () => this.updateUrl()\n                      }\n                    ]}\n                    className=\"plantuml-input\"\n                  />\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12}>\n                <div className=\"graph-con\">\n                  <img alt=\"plantuml-graph\" src={graphUrl} />\n                </div>\n              </Col>\n            </Row>\n          </>\n        ) : (\n          <Row>\n            <Col xs={12} sm={6} md={5}>\n              <div className=\"ace-con\">\n                <AceEditor\n                  theme=\"github\"\n                  fontSize={14}\n                  onChange={v => {\n                    this.updateValue(v);\n                  }}\n                  keyboardHandler={keybindingValue}\n                  value={value}\n                  name=\"plantuml-input\"\n                  width=\"100%\"\n                  height=\"425px\"\n                  editorProps={{ $blockScrolling: true }}\n                  commands={[\n                    {\n                      name: \"updateUrl\",\n                      bindKey: { win: \"Shift-Enter\", mac: \"Shift-Enter\" },\n                      exec: () => this.updateUrl()\n                    }\n                  ]}\n                  className=\"plantuml-input\"\n                />\n              </div>\n            </Col>\n            <Col xs={12} sm={6} md={7}>\n              <div className=\"graph-con\">\n                <img alt=\"plantuml-graph\" src={graphUrl} />\n              </div>\n            </Col>\n          </Row>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}