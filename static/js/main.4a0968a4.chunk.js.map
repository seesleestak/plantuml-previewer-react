{"version":3,"sources":["default-uml.js","App.js","serviceWorker.js","index.js"],"names":["keybindingOptions","text","value","key","orientationOptions","graphTypeOptions","appendNamespace","str","setItem","localStorage","getItem","App","state","defaultValue","graphTypeValue","keybindingValue","orientationValue","graphUrl","dismiss","updateValue","v","setState","changeKeybindingValue","changeGraphType","changeOrientation","dismissHelpMessage","updateUrl","encodedMarkup","plantumlEncoder","encode","url","this","className","Header","as","Form","bottom","xs","md","lg","Field","label","control","Select","fluid","onChange","e","options","Button","primary","onClick","Message","info","icon","onDismiss","Icon","name","Content","href","alt","Segment","theme","fontSize","keyboardHandler","width","height","editorProps","$blockScrolling","commands","bindKey","win","mac","exec","target","rel","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a0968a4.chunk.js","sourcesContent":["export default `title Example\n\nFrontend -> Middletier: GET /posts\n\nMiddletier -> Backend: GET /comments\nBackend -> Service: comments\nService --> Backend: return(comments)\nBackend --> Middletier: return(comments)\n\nalt links not provided\n  Middletier -> Backend: GET /thumbnails\n  Backend --> Middletier: return(thumbnails)\n  Middletier -> Backend: GET /likes\n  Backend --> Middletier: return(likes)\nelse  links provided\n  Middletier -> Backend: POST /links\n  Backend --> Middletier: return(links)\nend\n\nMiddletier --> Frontend: return(posts)`;\n","import React from \"react\";\nimport AceEditor from \"react-ace\";\nimport plantumlEncoder from \"plantuml-encoder\";\nimport { Row, Col } from \"react-flexbox-grid\";\nimport {\n  Icon,\n  Message,\n  Segment,\n  Header,\n  Button,\n  Form,\n  Select\n} from \"semantic-ui-react\";\nimport defaultValue from \"./default-uml\";\n\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/keybinding-vim\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"./App.css\";\n\nconst keybindingOptions = [\n  { text: \"Normal\", value: \"normal\", key: \"normal\" },\n  { text: \"Vim\", value: \"vim\", key: \"vim\" },\n  { text: \"Emacs\", value: \"emacs\", key: \"emacs\" }\n];\n\nconst orientationOptions = [\n  { text: \"Vertical\", value: \"vertical\", key: \"vertical\" },\n  { text: \"Horizontal\", value: \"horizontal\", key: \"horizontal\" }\n];\n\nconst graphTypeOptions = [\n  { text: \"SVG\", value: \"svg\", key: \"svg\" },\n  { text: \"PNG\", value: \"img\", key: \"img\" }\n];\n\nconst appendNamespace = str => {\n  return `plantuml-previewer-${str}`;\n};\nconst setItem = (key, value) => {\n  return localStorage.setItem(appendNamespace(key), value);\n};\nconst getItem = key => {\n  return localStorage.getItem(appendNamespace(key));\n};\n\nclass App extends React.Component {\n  state = {\n    value: getItem(\"uml\") || defaultValue,\n    graphTypeValue: getItem(\"graph-type-value\") || graphTypeOptions[0].value,\n    keybindingValue: getItem(\"keybinding-value\") || keybindingOptions[0].value,\n    orientationValue:\n      getItem(\"orientation-value\") || orientationOptions[0].value,\n    graphUrl: \"\",\n    dismiss: getItem(\"dismiss\") || false\n  };\n\n  updateValue = v => this.setState({ value: v });\n  changeKeybindingValue = v => {\n    setItem(\"keybinding-value\", v);\n    this.setState({ keybindingValue: v });\n  };\n  changeGraphType = v => {\n    setItem(\"graph-type-value\", v);\n    this.setState({ graphTypeValue: v });\n  };\n  changeOrientation = v => {\n    setItem(\"orientation-value\", v);\n    this.setState({ orientationValue: v });\n  };\n  dismissHelpMessage = () => {\n    setItem(\"dismiss\", true);\n    this.setState({ dismiss: true });\n  };\n\n  updateUrl = () => {\n    const { value, graphTypeValue } = this.state;\n    const encodedMarkup = plantumlEncoder.encode(value);\n    const url = `http://www.plantuml.com/plantuml/${graphTypeValue}/${encodedMarkup}`;\n    setItem(\"uml\", value);\n    this.setState({ graphUrl: url });\n  };\n\n  componentDidMount() {\n    this.updateUrl();\n  }\n\n  render() {\n    const {\n      value,\n      keybindingValue,\n      orientationValue,\n      graphTypeValue,\n      graphUrl,\n      dismiss\n    } = this.state;\n    return (\n      <div className=\"app\">\n        <Header as=\"h1\">PlantUML Previewer</Header>\n        <Form>\n          <Row bottom=\"xs\" className=\"options-row\">\n            <Col xs={12} md={2} lg={1} className=\"option-item\">\n              <Form.Field\n                label=\"Keybinding\"\n                control={Select}\n                fluid\n                value={keybindingValue}\n                onChange={(e, { value }) => {\n                  this.changeKeybindingValue(value);\n                }}\n                options={keybindingOptions}\n              />\n            </Col>\n            <Col xs={12} md={3} lg={2} className=\"option-item\">\n              <Form.Field\n                label=\"Orientation\"\n                control={Select}\n                fluid\n                value={orientationValue}\n                onChange={(e, { value }) => this.changeOrientation(value)}\n                options={orientationOptions}\n              />\n            </Col>\n            <Col xs={12} md={2} lg={1} className=\"option-item\">\n              <Form.Field\n                label=\"Graph Type\"\n                control={Select}\n                fluid\n                value={graphTypeValue}\n                onChange={(e, { value }) => this.changeGraphType(value)}\n                options={graphTypeOptions}\n              />\n            </Col>\n            <Col xs={12} md={4} lg={3}>\n              <Button\n                className=\"submit-btn\"\n                primary\n                fluid\n                onClick={this.updateUrl}\n              >\n                Submit (Shift + Enter)\n              </Button>\n            </Col>\n          </Row>\n          {!dismiss && (\n            <Row>\n              <Col md={12} lg={5}>\n                <Message\n                  info\n                  icon\n                  onDismiss={this.dismissHelpMessage}\n                  className=\"help-row\"\n                >\n                  <Icon name=\"info circle\" />\n                  <Message.Content>\n                    <Message.Header>\n                      Need some help with the syntax?\n                    </Message.Header>\n                    Take a look at the{\" \"}\n                    <a\n                      href=\"https://plantuml.com/sequence-diagram\"\n                      alt=\"uml syntax documentation\"\n                    >\n                      PlantUML Sequence Diagram documentation\n                    </a>\n                    .\n                  </Message.Content>\n                </Message>\n              </Col>\n            </Row>\n          )}\n        </Form>\n        {orientationValue === \"horizontal\" ? (\n          <>\n            <Row>\n              <Col xs={12}>\n                <Segment className=\"ace-container\">\n                  <AceEditor\n                    theme=\"github\"\n                    fontSize={14}\n                    onChange={v => {\n                      this.updateValue(v);\n                    }}\n                    keyboardHandler={keybindingValue}\n                    value={value}\n                    name=\"plantuml-input\"\n                    width=\"100%\"\n                    height=\"425px\"\n                    editorProps={{ $blockScrolling: true }}\n                    commands={[\n                      {\n                        name: \"updateUrl\",\n                        bindKey: { win: \"Shift-Enter\", mac: \"Shift-Enter\" },\n                        exec: () => this.updateUrl()\n                      }\n                    ]}\n                    className=\"plantuml-input\"\n                  />\n                </Segment>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12}>\n                <Segment>\n                  <a\n                    alt=\"plantuml-graph-a\"\n                    href={graphUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <img alt=\"plantuml-graph\" src={graphUrl} />\n                  </a>\n                </Segment>\n              </Col>\n            </Row>\n          </>\n        ) : (\n          <Row>\n            <Col md={12} lg={5}>\n              <Segment className=\"ace-container\">\n                <AceEditor\n                  theme=\"github\"\n                  fontSize={14}\n                  onChange={v => {\n                    this.updateValue(v);\n                  }}\n                  keyboardHandler={keybindingValue}\n                  value={value}\n                  name=\"plantuml-input\"\n                  width=\"100%\"\n                  height=\"80vh\"\n                  editorProps={{ $blockScrolling: true }}\n                  commands={[\n                    {\n                      name: \"updateUrl\",\n                      bindKey: { win: \"Shift-Enter\", mac: \"Shift-Enter\" },\n                      exec: () => this.updateUrl()\n                    }\n                  ]}\n                  className=\"plantuml-input\"\n                />\n              </Segment>\n            </Col>\n            <Col md={12} lg={7}>\n              <Segment>\n                <div className=\"graph-con\">\n                  <a\n                    alt=\"plantuml-graph-a\"\n                    href={graphUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <img alt=\"plantuml-graph\" src={graphUrl} />\n                  </a>\n                </div>\n              </Segment>\n            </Col>\n          </Row>\n        )}\n        <div className=\"github-link\">\n          <a href=\"https://github.com/seesleestak/plantuml-previewer-react\">\n            View on github\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}